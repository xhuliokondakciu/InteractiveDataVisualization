@model KGTMachineLearningWeb.Models.ChartConfiguration.ChartsConfiguration

@{
    ViewBag.Title = "Create";
}

@Styles.Render("~/Content/codemirror")

<div class="row">
    <div class="card bg-light o-hidde" id="content-body" style="width:100%">
        <div class="card-body pt-2">
            <h3>Create</h3>

            <div id="createFormContainer">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-group">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ProcessorId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.ProcessorId, ViewBag.Processors as IEnumerable<SelectListItem>, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ProcessorId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ConfigurationXml, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.ConfigurationXml, new { @class = "form-control", id = "configXml" })
                                @Html.ValidationMessageFor(model => model.ConfigurationXml, "", new { @class = "text-danger" })
                                <br/>
                                <button class="btn btn-secondary mt-2 mb-2" id="resetXml">Reset xml</button>
                            </div>
                        </div>

                        @if (User.IsInRole("Admin"))
                        {
                        <div class="form-group">
                            @Html.LabelFor(model => model.IsSystem, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.IsSystem)
                                    <small class="form-text text-muted">System configurations will show for all users</small>
                                    @Html.ValidationMessageFor(model => model.IsSystem, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        }

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save" class="btn btn-primary" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/codemirror")

    <script>
        $(function () {
            document.getElementById("configXml").value = vkbeautify.xml(document.getElementById("configXml").value);

            let configXml = CodeMirror.fromTextArea(document.getElementById("configXml"), {
                mode: "xml",
                lineNumbers: true
            });

            $("#resetXml").click(function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                let template = vkbeautify.xml(`@Html.Raw(ViewBag.ChartConfigTemplate)`);
                configXml.setValue(template);
            });
        })
    </script>
}
